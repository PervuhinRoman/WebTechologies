// orders.js

const API_URL = 'https://edu.std-900.ist.mospolytech.ru/labs/api/orders';
const API_KEY = 'fd0ca332-f6dc-4694-9d19-27e96b8648d0';

document.addEventListener('DOMContentLoaded', loadOrders);

async function loadOrders() {
    const ordersList = document.getElementById('ordersList');
    ordersList.innerHTML = '<tr><td colspan="6" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</td></tr>';

    try {
        const response = await fetch(`${API_URL}?api_key=${API_KEY}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const orders = await response.json();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ ‚Äî –≤–≤–µ—Ä—Ö—É)
        orders.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        if (orders.length === 0) {
            ordersList.innerHTML = `
                <tr>
                <td colspan="6" style="text-align: center; padding: 30px;">
                    –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.
                </td>
                </tr>
            `;
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
        const dishesResponse = await fetch('https://edu.std-900.ist.mospolytech.ru/labs/api/dishes');
        const allDishes = await dishesResponse.json();
        const dishMap = {};
        allDishes.forEach(dish => {
            dishMap[dish.id] = dish.name;
        });

        let html = '';
        orders.forEach((order, index) => {
            const orderNumber = index + 1;
            const date = new Date(order.created_at).toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            // –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
            const items = [];
            if (order.soup_id && dishMap[order.soup_id]) items.push(dishMap[order.soup_id]);
            if (order.main_course_id && dishMap[order.main_course_id]) items.push(dishMap[order.main_course_id]);
            if (order.salad_id && dishMap[order.salad_id]) items.push(dishMap[order.salad_id]);
            if (order.drink_id && dishMap[order.drink_id]) items.push(dishMap[order.drink_id]);
            if (order.dessert_id && dishMap[order.dessert_id]) items.push(dishMap[order.dessert_id]);

            const composition = items.join(', ');

            // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
            let deliveryTime = '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ (—Å 07:00 –¥–æ 23:00)';
            if (order.delivery_type === 'by_time' && order.delivery_time) {
                deliveryTime = order.delivery_time;
            } else if (order.delivery_type === 'now') {
                deliveryTime = '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ (—Å 07:00 –¥–æ 23:00)';
            }

            // –°—Ç–æ–∏–º–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ ID –±–ª—é–¥)
            let total = 0;
            if (order.soup_id && dishMap[order.soup_id]) {
                const dish = allDishes.find(d => d.id === order.soup_id);
                if (dish) total += dish.price;
            }
            if (order.main_course_id && dishMap[order.main_course_id]) {
                const dish = allDishes.find(d => d.id === order.main_course_id);
                if (dish) total += dish.price;
            }
            if (order.salad_id && dishMap[order.salad_id]) {
                const dish = allDishes.find(d => d.id === order.salad_id);
                if (dish) total += dish.price;
            }
            if (order.drink_id && dishMap[order.drink_id]) {
                const dish = allDishes.find(d => d.id === order.drink_id);
                if (dish) total += dish.price;
            }
            if (order.dessert_id && dishMap[order.dessert_id]) {
                const dish = allDishes.find(d => d.id === order.dessert_id);
                if (dish) total += dish.price;
            }

            html += `
            <tr>
                <td>${orderNumber}</td>
                <td>${date}</td>
                <td>${composition}</td>
                <td>${total}‚ÇΩ</td>
                <td>${deliveryTime}</td>
                <td class="action-icons">
                    <button title="–ü–æ–¥—Ä–æ–±–Ω–µ–µ" onclick="showOrderDetails(${order.id})">üëÅÔ∏è</button>
                    <button title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" onclick="editOrder(${order.id})">‚úèÔ∏è</button>
                    <button class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å" onclick="deleteOrder(${order.id})">üóëÔ∏è</button>
                </td>
                </tr>
            `;
        });

        ordersList.innerHTML = html;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
        ordersList.innerHTML = `
        <tr>
            <td colspan="6" style="text-align: center; padding: 30px; color: red;">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            </td>
        </tr>
    `;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
function showOrderDetails(id) {
    alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ #${id}`);
}

function editOrder(id) {
    alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${id}`);
}

function deleteOrder(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ DELETE –∑–∞–ø—Ä–æ—Å
        fetch(`${API_URL}/${id}?api_key=${API_KEY}`, {
            method: 'DELETE'
        })
            .then(res => {
                if (res.ok) {
                    alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.');
                    loadOrders(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                } else {
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑.');
                }
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
                alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
            });
    }
}